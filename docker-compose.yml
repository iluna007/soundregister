services:
  postgres:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend
  
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile_backend
    volumes:
      - .:/backend
    ports:
      - "5000:5000"
    depends_on:
      - postgres
    environment:
      FLASK_APP: run
      FLASK_ENV: development
      DATABASE_URL: ${DATABASE_URL}
      DB_HOST: postgres
      DB_PORT: 5432
    command: flask run --host=0.0.0.0 --port=5000
    networks:
      - backend

  frontend:
    build: 
      context: .
      dockerfile: frontend/Dockerfile_frontend
    container_name: react_frontend
    ports:
      - "5173:5173"
    depends_on:
      - postgres
    environment:
      - CHOKIDAR_USEPOLLING=true # Habilita el sondeo para React
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: ["npm", "run", "dev"]
    networks:
      - backend
      
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}  # Email de acceso a pgAdmin
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}         # Contrase√±a de acceso a pgAdmin
    ports:
      - "5050:80"  # Exponemos pgAdmin en el puerto 5050
    depends_on:
      - postgres
    networks:
      - backend
    volumes:
      - pgadmin_data:/var/lib/pgadmin

networks:
  backend:

volumes:
  db-data:
  pgadmin_data:
